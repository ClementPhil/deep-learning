class NeuralNetwork(object):
    def __init__(self, input_nodes,hidden_nodes,output_nodes,learning_rate):
        self.input_nodes = input_nodes
        self.hidden_nodes = hidden_nodes
        self.output_nodes =output_nodes
        
        self.weights_input_to_hidden = np.random.normal(0.0, self.hidden_nodes**-0.5, 
                                       (self.hidden_nodes, self.input_nodes))
        
        self.weights_hidden_to_output = np.random.normal(0.0, self.output_nodes**-0.5, 
                                       (self.output_nodes, self.hidden_nodes))
        self.lr = learning_rate
        
    def train(self,inputs_list,targets_list):
        # Convert inputs list to 2d array
        inputs = np.array(inputs_list, ndmin=2).T
        targets = np.array(targets_list, ndmin=2).T
         #### Implement the forward pass here ####
        ### Forward pass ###
        hidden_inputs = np.dot(self.weights_input_to_hidden,inputs)
        hidden_outputs = sigmoid(hidden_inputs)
        
        final_inputs =np.dot(self.weights_hidden_to_output, hidden_outputs)
        output = final_inputs
        
         #### Implement the backward pass here ####
        ### Backward pass ###
        
        # TODO: Output error
        o_error = targets - output
#         print('weights_hidden_to_output.shape is %d,%d '%self.weights_hidden_to_output.shape)
#         print('output.shape is %d,%d' %output.shape)
        h_error = np.dot(self.weights_hidden_to_output.T,output)
        h_grad = hidden_outputs * (1 - hidden_outputs)
        
        # TODO: Update the weight
#         print('o_error.shape is %d,%d '%o_error.shape)
#         print('h_ouputs.shape is %d,%d' %hidden_outputs.shape)
        
        self.weights_hidden_to_output += self.lr * np.dot(o_error, hidden_outputs.T) * 1
        self.weights_input_to_hidden  += self.lr * np.dot(h_error, inputs.T) * h_grad
        
    def run(self, inputs_list):
        # Run a forward pass through the network
        inputs = np.array(inputs_list, ndmin=2).T
        
        #### Implement the forward pass here ####
        # TODO: Hidden layer
        hidden_inputs = np.dot(self.weights_input_to_hidden, inputs)# signals into hidden layer
        hidden_outputs = sigmoid(hidden_inputs)# signals from hidden layer
        
        # TODO: Output layer
        final_inputs = np.dot(self.weights_hidden_to_output, hidden_outputs)# signals into final output layer
        final_outputs = final_inputs# signals from final output layer 
        
        return final_outputs
        
        